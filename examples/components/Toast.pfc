<template>
  <div v-if="isVisible" class="toast" :class="[`toast-${type}`, { 'toast-dismissible': dismissible }]">
    <div class="toast-icon">{{ getIcon() }}</div>
    <div class="toast-content">
      <div v-if="title" class="toast-title">{{ title }}</div>
      <div class="toast-message">{{ message }}</div>
    </div>
    <button v-if="dismissible" class="toast-dismiss" @click="handleDismiss">
      ✕
    </button>
  </div>
</template>

<script lang="typescript">
interface Props {
  type?: 'success' | 'error' | 'warning' | 'info';
  title?: string;
  message: string;
  duration?: number;
  dismissible?: boolean;
  isVisible?: boolean;
  onDismiss?: () => void;
  position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left' | 'top-center' | 'bottom-center';
}

let timeoutId: number | null = null;

// Get icon based on type
function getIcon(): string {
  switch (props.type) {
    case 'success': return '✅';
    case 'error': return '❌';
    case 'warning': return '⚠️';
    case 'info': return 'ℹ️';
    default: return 'ℹ️';
  }
}

// Handle dismiss action
function handleDismiss() {
  if (timeoutId) {
    clearTimeout(timeoutId);
  }
  
  const toast = document.querySelector('.toast');
  if (toast) {
    toast.classList.add('toast-hiding');
    setTimeout(() => {
      if (props.onDismiss) {
        props.onDismiss();
      }
    }, 300);
  }
}

// Auto-dismiss after duration
function startAutoDismiss() {
  if (props.duration && props.duration > 0) {
    timeoutId = window.setTimeout(() => {
      handleDismiss();
    }, props.duration);
  }
}

// Set up position and auto-dismiss
document.addEventListener('DOMContentLoaded', () => {
  const toast = document.querySelector('.toast');
  if (toast && props.position) {
    toast.classList.add(`toast-${props.position}`);
  }
  
  const dismissBtn = document.querySelector('.toast-dismiss');
  if (dismissBtn) {
    dismissBtn.addEventListener('click', handleDismiss);
  }
  
  startAutoDismiss();
});

// Clean up timeout on component destruction
window.addEventListener('beforeunload', () => {
  if (timeoutId) {
    clearTimeout(timeoutId);
  }
});

console.log('Toast component initialized with props:', props);
</script>

<style scoped>
.toast {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  padding: 1rem;
  border-radius: 8px;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  font-family: 'Arial', sans-serif;
  max-width: 400px;
  min-width: 300px;
  position: fixed;
  z-index: 1050;
  animation: slideInRight 0.3s ease;
  transition: all 0.3s ease;
}

/* Position variants */
.toast-top-right {
  top: 1rem;
  right: 1rem;
}

.toast-top-left {
  top: 1rem;
  left: 1rem;
  animation: slideInLeft 0.3s ease;
}

.toast-bottom-right {
  bottom: 1rem;
  right: 1rem;
  animation: slideInRight 0.3s ease;
}

.toast-bottom-left {
  bottom: 1rem;
  left: 1rem;
  animation: slideInLeft 0.3s ease;
}

.toast-top-center {
  top: 1rem;
  left: 50%;
  transform: translateX(-50%);
  animation: slideInDown 0.3s ease;
}

.toast-bottom-center {
  bottom: 1rem;
  left: 50%;
  transform: translateX(-50%);
  animation: slideInUp 0.3s ease;
}

/* Type variants */
.toast-success {
  background: #f0f9ff;
  border-left: 4px solid #10b981;
  color: #065f46;
}

.toast-error {
  background: #fef2f2;
  border-left: 4px solid #ef4444;
  color: #991b1b;
}

.toast-warning {
  background: #fffbeb;
  border-left: 4px solid #f59e0b;
  color: #92400e;
}

.toast-info {
  background: #f0f9ff;
  border-left: 4px solid #3b82f6;
  color: #1e40af;
}

.toast-icon {
  font-size: 1.25rem;
  flex-shrink: 0;
  margin-top: 0.125rem;
}

.toast-content {
  flex: 1;
  min-width: 0;
}

.toast-title {
  font-weight: 600;
  font-size: 0.875rem;
  margin-bottom: 0.25rem;
  line-height: 1.25;
}

.toast-message {
  font-size: 0.875rem;
  line-height: 1.5;
  word-wrap: break-word;
}

.toast-dismiss {
  background: none;
  border: none;
  color: inherit;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 4px;
  font-size: 1rem;
  opacity: 0.7;
  transition: all 0.2s ease;
  flex-shrink: 0;
  width: 1.5rem;
  height: 1.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.toast-dismiss:hover {
  opacity: 1;
  background: rgba(0, 0, 0, 0.1);
}

.toast-hiding {
  opacity: 0;
  transform: translateX(100%);
}

/* Animations */
@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-100%);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(-100%);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(100%);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

/* Responsive design */
@media (max-width: 640px) {
  .toast {
    left: 1rem !important;
    right: 1rem !important;
    max-width: none;
    min-width: 0;
    transform: none !important;
  }
  
  .toast-top-center,
  .toast-bottom-center {
    transform: none !important;
  }
  
  .toast-title {
    font-size: 0.8125rem;
  }
  
  .toast-message {
    font-size: 0.8125rem;
  }
}
</style> 